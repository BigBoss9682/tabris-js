{
  "type": "Composite",
  "category": "widget",
  "description": "An empty widget that can contain other widgets.",
  "generics": [
    {
      "name": "ChildType",
      "extends": "Widget",
      "default": "Widget",
      "description": "The common widget class of the children this composite can contain."
    }
  ],
  "extends": "Widget",
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "properties",
        "type": {
          "interface": "Properties",
          "generics": ["Composite"]
        },
        "optional": true,
        "description": "Sets all key-value pairs in the properties object as widget properties."
      }
    ]
  },
  "properties": {
    "jsxAttributes": {
      "const": true,
      "readonly": true,
      "ts_only": true,
      "type": "JSXAttributes<this> & {children?: JSXChildren<ChildType>}"
    },
    "layout": {
      "type": {"union": ["Layout", "null"]},
      "const": true,
      "default": "Layout",
      "description": "The layout manager responsible for interpreting the [`layoutData`](./Widget.md#layoutdata) of the child widgets of this Composite."
    },
    "_layout": {
      "private": true,
      "type": "Layout"
    },
    "$children": {
      "private": true,
      "type": {"interface": "Array", "generics": ["Widget"]}
    }
  },
  "methods": {
    "append": [
      {
        "parameters": [
          {
            "name": "...widgets",
            "type": {"interface": "Array", "generics": ["Widget"]},
            "ts_type": "ChildType[]"
          }
        ],
        "returns": "this",
        "description": "Adds the given widgets to the composite."
      },
      {
        "parameters": [
          {
            "name": "widgets",
            "type": {"interface": "Array", "generics": ["Widget"]},
            "ts_type": "ChildType[]"
          }
        ],
        "returns": "this",
        "description": "Adds all widgets in the given array to the composite."
      },
      {
        "parameters": [
          {
            "name": "widgets",
            "type": "WidgetCollection",
            "ts_type": "WidgetCollection<ChildType>"
          }
        ],
        "returns": "this",
        "description": "Adds all widgets in the given collection to the composite."
      }
    ],
    "children": [
      {
        "generics": [
          {
            "name": "Result",
            "extends": "ChildType",
            "default": "ChildType"
          }
        ],
        "parameters": [
          {
            "name": "selector",
            "type": "Selector",
            "ts_type": "Selector<ChildType, Result>",
            "optional": true,
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": {
          "interface": "WidgetCollection",
          "generics": ["ChildType"]
        },
        "ts_returns": "WidgetCollection<Result>",
        "description": "Returns a (possibly empty) collection of all children of this widget that match the given selector.\n\nWhen writing custom UI components it may be useful to overwrite this method to prevent access to the internal children by external code. Doing so also affects `find` and `apply`, on this widget as well as on all parents, thereby preventing accidental clashes of widget id or class values. See \"[Encapsulation](../selector.md#encapsulation)\"."
      }
    ],
    "_children": [
      {
        "generics": [
          {
            "name": "Result",
            "extends": "ChildType",
            "default": "ChildType"
          }
        ],
        "protected": true,
        "parameters": [
          {
            "name": "selector",
            "type": "Selector",
            "ts_type": "Selector<ChildType, Result>",
            "optional": true,
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": "WidgetCollection",
        "ts_returns": "WidgetCollection<Result>",
        "description": "Identical to the `children` method, but intended to be used by subclasses in case the `children` method was overwritten. See \"[Encapsulation](../selector.md#encapsulation)\"."
      }
    ],
    "find": {
      "generics": [
        {
          "name": "Result",
          "extends": "ChildType",
          "default": "ChildType"
        }
      ],
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "ts_type": "Selector<Widget, Result>",
          "optional": true,
          "description": "A selector expression or a predicate function to filter the results."
        }
      ],
      "returns": "WidgetCollection",
      "ts_returns": "WidgetCollection<Result>",
      "description": "Returns a collection containing all descendants of all widgets in this collection that match the given selector.\n\nIf you wish to always exclude specific \"internal\" children from the result, overwrite the [`children`](#childrenselector) method ([details](#children)) to return an empty `WidgetCollection`, or use the [`@component`](../@component.md) decorator. **These children will then only be visible via the protected `_find` method.** See \"[Encapsulation](../selector.md#encapsulation)\""
    },
    "_find": {
      "generics": [
        {
          "name": "Result",
          "extends": "Widget",
          "default": "Widget"
        }
      ],
      "protected": true,
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "ts_type": "Selector<Widget, Result>",
          "optional": true,
          "description": "A selector expression or a predicate function to filter the results."
        }
      ],
      "returns": "WidgetCollection",
      "ts_returns": "WidgetCollection<Result>",
      "description": "Identical to the `find` method, but intended to be used only by subclasses (custom components) that encapsulate their children. This is the case if the `children` method was overwritten or the `@component` decorator is used on the subclass."
    },
    "apply": {
      "parameters": [
        {
          "name": "properties",
          "type": {
            "map": {
              "selector": "object"
            },
            "indexType": "SelectorString"
          }
        }
      ],
      "returns": "this",
      "description": "Applies the given properties to all descendants that match the associated selector(s). For better type safety use the [`Set`](./utils.md#settargetproperties) to create properties objects.\n\nIf you wish to always exclude specific \"internal\" children from this, overwrite the `children` method on their parent. See \"[Encapsulation](../selector.md#encapsulation)\"."
    },
    "_apply": {
      "protected": true,
      "parameters": [
        {
          "name": "properties",
          "type": {
            "map": {
              "selector": {"interface": "Properties", "generics": ["Widget"]}
            },
            "indexType": "SelectorString"
          }
        }
      ],
      "returns": "this",
      "description": "Identical to the `apply` method, but intended to be used by subclasses in case the `children` method was overwritten . See \"[Encapsulation](../selector.md#encapsulation)\""
    },
    "_initLayout": {
      "protected": true,
      "parameters": [
        {
          "name": "props",
          "type": {
            "map": {
              "layout": {"type": "Layout", "optional": true}
            }
          },
          "optional": true
        }
      ],
      "description": "Called with the constructor paramter (if any) to initialize the composite's layout manager. May be overwritten to customize/replace the layout. The new implementation must make a super call to initialize the layout."
    },
    "_checkLayout": {
      "protected": true,
      "parameters": [
        {
          "name": "value",
          "type": "Layout"
        }
      ],
      "description": "Called by the framework with the layout about to be assigned to this composite. May be overwritten to reject a layout by throwing an Error."
    },
    "_acceptChild": {
      "protected": true,
      "parameters": [
        {
          "name": "child",
          "type": "Widget"
        }
      ],
      "returns": "boolean",
      "description": "Called by the framework with each widget that is about to be added as a child of this composite. May be overwritten to reject some or all children by returning `false`."
    },
    "_addChild": {
      "protected": true,
      "parameters": [
        {
          "name": "child",
          "type": "Widget"
        },
        {
          "name": "index",
          "type": "number",
          "optional": true
        }
      ],
      "description": "Called by the framework with a child to be assigned to this composite. Triggers the 'addChild' event. May be overwritten to run any code prior or after the child is inserted."
    },
    "_removeChild": {
      "protected": true,
      "parameters": [
        {
          "name": "child",
          "type": "Widget"
        }
      ],
      "description": "Called by the framework with a child to be removed from this composite. Triggers the 'removeChild' event. May be overwritten to run any code prior or after the child is removed."
    },
    "_scheduleRenderChildren": {
      "private": true
    },
    "$flushChildren": {
      "private": true
    }
  },
  "events": {
    "addChild": {
      "description": "Fired when a child is added to this widget.",
      "parameters": {
        "child": {
          "description": "The widget that is added as a child.",
          "type": "Widget"
        },
        "index": {
          "description": "Denotes the position in the children list at which the child widget is added.",
          "type": "number"
        }
      }
    },
    "removeChild": {
      "description": "Fired when a child is removed from this widget.",
      "parameters": {
        "child": {
          "description": "The widget that is removed.",
          "type": "Widget"
        },
        "index": {
          "description": "The property `index` denotes the removed child widget's position in the children list.`",
          "type": "number"
        }
      }
    }
  },
  "links": [
    {
      "title": "Creating a simple `Composite`",
      "snippet": "composite.jsx"
    }
  ]
}
