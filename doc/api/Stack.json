{
  "type": "Stack",
  "category": "widget",
  "description": "A composite with the `layout` property initialized with a `Stack`. All children are automatically arranged in one vertical stack, starting from the top. The `layoutData` on the children is ignored.",
  "extends": "Composite",
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "properties",
        "type": {
          "interface": "Properties",
          "generics": ["Stack"]
        },
        "optional": true,
        "description": "Sets all key-value pairs in the properties object as widget properties."
      }
    ]
  },
  "properties": {
    "layout": {
      "type": "StackLayout",
      "default": "StackLayout",
      "const": true,
      "description": "The stack layout manager responsible for interpreting the [`layoutData`](./Widget.md#layoutdata) of the child widgets of this Composite."
    },
    "spacing": {
      "type": "number",
      "default": 0,
      "const": true,
      "description": "Additional space to add between the children in device independent pixel."
    },
    "alignment": {
      "type": {"union": ["'left'", "'centerX'", "'stretchX'", "'right'"]},
      "const": true,
      "default": "'left'",
      "description": "Determines the horizontal placement of the children. For the `stretchX` value to work correctly the `Stack` needs to be given a width either by setting `width` or by setting `left` and `right`."
    }
  },
  "links": [
    {
      "title": "Creating a simple `Stack`",
      "snippet": "stack.jsx"
    },
    {
      "title": "Creating a `Stack` with horizontal alignment",
      "snippet": "stack-alignment.jsx"
    },
    {
      "title": "Creating a `Stack` with vertical alignment",
      "snippet": "stack-valign.jsx"
    }
  ]
}
