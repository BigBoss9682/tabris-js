{
  "type": "Constraint",
  "category": "data",
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "reference",
        "type": {"union": ["Percent", "SiblingReference"]},
        "description": "Sets the `reference` property."
      },
      {
        "name": "offset",
        "type": "Offset",
        "description": "Sets the `offset` property."
      }
    ]
  },
  "description": "Represents a constraint on the layout of a widget that the parent uses to determine the position of one of its edges. See also [ConstraintValue](../types.md#constraintvalue)",
  "properties": {
    "reference": {
      "type": {"union": ["Percent", "SiblingReference"]},
      "description": "A reference point from which the offset is added. Either a [SiblingReference](../types.md#siblingreference) - indicating the opposing edge of that widget - or a [`Percent`](./Percent.md) instance, indicating a fraction of the width/height (padding excluded) of the parent widget.\n\nIf the sibling reference is a string it will be a valid selector string and not contain any pseudo selectors   (`'next()'`/`'prev()'`).",
      "const": true
    },
    "offset": {
      "type": "Offset",
      "description": "An additional distance between the reference point and the edge of the widget itself.",
      "const": true
    }
  },
  "methods": {
    "toString": {
      "description": "A string representation of the constraint as a space separated string in the pattern of `'reference offset'`.",
      "returns": "string"
    },
    "toArray": {
      "description": "A tuple consisting of the values of the `reference` and `offset` properties, i.e. `[reference, offset]`.",
      "returns": "ConstraintArray"
    }
  },
  "statics": {
    "methods": {
      "from": {
        "parameters": [
          {
            "name": "constraintValue",
            "description": "The value to create an Constraint instance from.",
            "type": "ConstraintValue"
          }
        ],
        "description": "Creates a new instance of Constraint using [any valid constraint expression](../types.md#constraintvalue). For any other value, including `null` and `'auto'`, the method throws.",
        "returns": "Constraint"
      }
    },
    "properties": {
      "next": {
        "readonly": true,
        "type": "unique symbol",
        "description": "A [SiblingReference](../types.md#siblingreference) indicating the next widget in the list of children attached to the same parent. Used by the [`reference`](#reference) property. Also available as `LayoutData.next`."
      },
      "prev": {
        "readonly": true,
        "type": "unique symbol",
        "description": "A [SiblingReference](../types.md#siblingreference) indicating the previous widget in the list of children attached to the same parent. Used by the [`reference`](#reference) property. Also available as `LayoutData.prev`."
      }
    }
  }
}
