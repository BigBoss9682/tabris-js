{
  "type": "ScrollView",
  "description": "A composite that allows its content to overflow either vertically (default) or horizontally. Since the ScrollView does not compute its own size, the width and height must be defined by the respective layout properties (e.g. either `width` or `left` and `right` must be specified).",
  "extends": "Composite",
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "properties",
        "type": "Properties<ScrollView>",
        "optional": true,
        "description": "Sets all key-value pairs in the properties object as widget properties."
      }
    ]
  },
  "properties": {
    "direction": {
      "type": "string",
      "values": [
        "vertical",
        "horizontal"
      ],
      "default": "vertical",
      "const": true,
      "description": "Specifies the scrolling direction of the scroll composite."
    },
    "offsetX": {
      "type": "number",
      "readonly": true,
      "description": "The horizontal scrolling position in dip."
    },
    "offsetY": {
      "type": "number",
      "readonly": true,
      "description": "The vertical scrolling position in dip."
    },
    "scrollbarVisible": {
      "type": "boolean",
      "default": "true",
      "description": "Allows to show or hide scroll bar for current direction."
    },
    "scrollXState": {
      "type": "string",
      "readonly": true,
      "values": [
        "rest",
        "drag",
        "scroll"
      ],
      "default": "rest",
      "description": "The scroll state of the `ScrollView` in horizontal direction. The following states are supported:\n\n* `rest` - no scrolling\n* `drag` the user moves the `ScrollView` content with his finger\n* `scroll` the user has flinged the content with his finger or the `ScrollView` is scrolling programmatically"
    },
    "scrollYState": {
      "type": "string",
      "readonly": true,
      "values": [
        "rest",
        "drag",
        "scroll"
      ],
      "default": "rest",
      "description": "The scroll state of the `ScrollView` in vertical direction. The following states are supported:\n\n* `rest` - no scrolling\n* `drag` the user moves the `ScrollView` content with his finger\n* `scroll` the user has flinged the `ScrollView` content with his finger or the `ScrollView` is scrolling programmatically"
    }
  },
  "methods": {
    "scrollToX": {
      "parameters": [
        {
          "name": "offset",
          "type": "number",
          "description": "The offset to scroll to in dip."
        },
        {
          "name": "options",
          "type": "{animate?: boolean}",
          "optional": true,
          "description": "An additional object to control the animation. Set to `{animate: false}` to scroll without an animation."
        }
      ],
      "returns": "this",
      "description": "Scrolls to the given horizontal offset. Give `{animate: false}` as the second parameter to suppress the animation."
    },
    "scrollToY": {
      "parameters": [
        {
          "name": "offset",
          "type": "number",
          "description": "The offset to scroll to in dip."
        },
        {
          "name": "options",
          "type": "{animate?: boolean}",
          "optional": true,
          "description": "An additional object to control the animation. Set to `{animate: false}` to scroll without an animation."
        }
      ],
      "returns": "this",
      "description": "Scrolls to the given vertical offset. Give `{animate: false}` as the second parameter to suppress the animation."
    }
  },
  "events": {
    "scrollX": {
      "eventObject": "ScrollViewScrollEvent",
      "description": "Fired while scrolling horizontally.",
      "parameters": {
        "offset": {
          "description": "Indicates the current horizontal scrolling position.",
          "type": "number"
        }
      }
    },
    "scrollY": {
      "eventObject": "ScrollViewScrollEvent",
      "description": "Fired while scrolling vertically.",
      "parameters": {
        "offset": {
          "description": "Indicates the current vertical scrolling position.",
          "type": "number"
        }
      }
    }
  },
  "links": [
    {
      "title": "Creating a simple `ScrollView`",
      "snippet": "scrollview.jsx"
    },
    {
      "title": "How to implement parallax scrolling with a `ScrollView`",
      "snippet": "scrollview-parallax.jsx"
    }
  ]
}
